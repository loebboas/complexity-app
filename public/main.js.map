{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/middlebar/middlebar.component.css","webpack:///./src/app/components/middlebar/middlebar.component.html","webpack:///./src/app/components/middlebar/middlebar.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/perspective/perspective.component.css","webpack:///./src/app/components/perspective/perspective.component.html","webpack:///./src/app/components/perspective/perspective.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/components/toolbar/toolbar.component.css","webpack:///./src/app/components/toolbar/toolbar.component.html","webpack:///./src/app/components/toolbar/toolbar.component.ts","webpack:///./src/app/components/tools/dimension/dimension.component.css","webpack:///./src/app/components/tools/dimension/dimension.component.html","webpack:///./src/app/components/tools/dimension/dimension.component.ts","webpack:///./src/app/components/tools/edit/edit.component.html","webpack:///./src/app/components/tools/edit/edit.component.scss","webpack:///./src/app/components/tools/edit/edit.component.ts","webpack:///./src/app/components/tools/new/new.component.css","webpack:///./src/app/components/tools/new/new.component.html","webpack:///./src/app/components/tools/new/new.component.ts","webpack:///./src/app/components/tools/search/search.component.html","webpack:///./src/app/components/tools/search/search.component.scss","webpack:///./src/app/components/tools/search/search.component.ts","webpack:///./src/app/components/viewer/viewer.component.css","webpack:///./src/app/components/viewer/viewer.component.html","webpack:///./src/app/components/viewer/viewer.component.ts","webpack:///./src/app/guards/auth.guard.ts","webpack:///./src/app/guards/notAuth.guard.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/app/services/draw-navbar.service.ts","webpack:///./src/app/services/draw-viewer.service.ts","webpack:///./src/app/services/internal.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core'; \r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { AuthGuard } from './guards/auth.guard';\r\nimport { NotAuthGuard } from './guards/notAuth.guard';\r\nimport { ViewerComponent } from './components/viewer/viewer.component';\r\n\r\n\r\nconst appRoutes: Routes = [\r\n\r\n  { path: 'register', component: RegisterComponent, canActivate: [NotAuthGuard] \r\n  },  \r\n  { path: 'login', component: LoginComponent, canActivate: [NotAuthGuard] \r\n  },\r\n  { path: 'viewer', component: ViewerComponent \r\n  },\r\n  { path: 'viewer/:id', component: ViewerComponent \r\n  },\r\n  {\r\n  \tpath: '**', component: ViewerComponent\r\n  }\r\n  ];\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [RouterModule.forRoot(appRoutes)],\r\n  providers: [],\r\n  bootstrap: [],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule { }","module.exports = \"\"","module.exports = \"<mat-sidenav-container class=\\\"example-container\\\">\\r\\n        <mat-sidenav #sidenav mode=\\\"side\\\" [(opened)]=\\\"opened\\\">\\r\\n                <app-perspective></app-perspective>\\r\\n        </mat-sidenav>\\r\\n        <mat-sidenav-content>\\r\\n      \\r\\n      <app-navbar></app-navbar>\\r\\n        <router-outlet></router-outlet>\\r\\n\\r\\n        <app-toolbar></app-toolbar>\\r\\n</mat-sidenav-content>\\r\\n</mat-sidenav-container>\"","import { Component, OnInit, Output } from '@angular/core';\r\nimport { InternalService } from './services/internal.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Complexity-App';\r\n  opened: boolean;\r\n  showTool;\r\n  viewerY: number;\r\n  navbarY: number;\r\n  constructor(private internalService: InternalService) { }\r\n\r\n \r\n  ngOnInit() {\r\n    this.internalService.selectedToolObs.subscribe(tool => {\r\n    if(tool == \"sidenav\"){\r\n     this.opened = true;\r\n    } else {\r\n      this.opened = false;\r\n    }\r\n  })\r\n  }\r\n\r\n}\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NavbarComponent } from './components/navbar/navbar.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { AuthService } from './services/auth.service';\r\nimport { DataService } from './services/data.service';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { AuthGuard } from './guards/auth.guard';\r\nimport { NotAuthGuard } from './guards/notAuth.guard';\r\nimport { NewComponent } from './components/tools/new/new.component';\r\nimport { MaterialModule } from './material.module';\r\nimport { ViewerComponent } from './components/viewer/viewer.component';\r\nimport { InternalService } from './services/internal.service';\r\nimport { ToolbarComponent } from './components/toolbar/toolbar.component';\r\nimport { SearchComponent } from './components/tools/search/search.component';\r\nimport { EditComponent } from './components/tools/edit/edit.component';\r\nimport { DimensionComponent } from './components/tools/dimension/dimension.component';\r\nimport { GridsterModule } from 'angular-gridster2';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { DrawNavbarService } from './services/draw-navbar.service';\r\nimport { DrawViewerService } from './services/draw-viewer.service';\r\nimport { PerspectiveComponent } from './components/perspective/perspective.component';\r\n\r\n\r\n\r\nimport {OverlayModule} from '@angular/cdk/overlay';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {CommonModule} from '@angular/common';\nimport { MiddlebarComponent } from './components/middlebar/middlebar.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavbarComponent,\r\n    RegisterComponent,\r\n    LoginComponent,\r\n    NewComponent,\r\n    ViewerComponent,\r\n    ToolbarComponent,\r\n    SearchComponent,\r\n    EditComponent,\r\n    DimensionComponent,\r\n    PerspectiveComponent,\r\n    MiddlebarComponent\r\n  ],\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    AppRoutingModule,\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    MaterialModule,\r\n    GridsterModule,\r\n    BrowserModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n    CommonModule\r\n  ],\r\n  providers: [AuthService, AuthGuard, NotAuthGuard, DataService, InternalService, DrawNavbarService, DrawViewerService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \".wholeThing {\\r\\n    height: 500px;\\r\\n}\"","module.exports = \"<div class=\\\"wholeThing\\\">\\r\\n\\r\\n<!-- Custom Success/Error Message -->\\r\\n<div class=\\\"row show-hide-message\\\">\\r\\n  <div [ngClass]=\\\"messageClass\\\">\\r\\n    {{ message }}\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n<mat-card>\\r\\n  <!-- Login Form -->\\r\\n  <form [formGroup]=\\\"form\\\" (submit)=\\\"onLoginSubmit()\\\">\\r\\n    <mat-card-title>\\r\\n      Login\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n      <!-- Username Field -->\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"username\\\">Username</label>\\r\\n        <div [ngClass]=\\\"{'has-error': form.controls.username.errors && form.controls.username.dirty, 'has-success': form.controls.username.valid && form.controls.username.dirty }\\\">\\r\\n          <input mat-input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"username\\\" formControlName=\\\"username\\\" />\\r\\n          <!-- Validation -->\\r\\n          <ul class=\\\"help-block\\\">\\r\\n            <li *ngIf=\\\"form.controls.username.errors?.required && form.controls.username.dirty\\\">This field is required.</li>\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n      <!-- Password Field  -->\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"password\\\">Password</label>\\r\\n        <div [ngClass]=\\\"{'has-error': form.controls.password.errors && form.controls.password.dirty, 'has-success': form.controls.password.valid && form.controls.password.dirty }\\\">\\r\\n          <input mat-input class=\\\"form-control\\\" type=\\\"password\\\" name=\\\"password\\\" formControlName=\\\"password\\\" />\\r\\n          <!-- Validation -->\\r\\n          <ul class=\\\"help-block\\\">\\r\\n            <li *ngIf=\\\"form.controls.password.errors?.required && form.controls.password.dirty\\\">This field is required.</li>\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </mat-card-content>\\r\\n\\r\\n    <!-- Submit Button -->\\r\\n   <button mat-raised-button [disabled]=\\\"!form.valid || processing\\\" class=\\\"btn btn-primary\\\" color=\\\"primary\\\" type=\\\"submit\\\" value=\\\"Login\\\">Login</button>\\r\\n  </form>\\r\\n</mat-card>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { AuthGuard } from '../../guards/auth.guard';\r\nimport { InternalService } from '../../services/internal.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  messageClass;\r\n  message;\r\n  processing = false;\r\n  form;\r\n  previousUrl;\r\n \r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private authGuard: AuthGuard,\r\n    private internalService: InternalService    \r\n  ) {\r\n    this.createForm(); // Create Login Form when component is constructed\r\n  }\r\n\r\n  // Function to create login form\r\n  createForm() {\r\n    this.form = this.formBuilder.group({\r\n      username: ['', Validators.required], // Username field\r\n      password: ['', Validators.required] // Password field\r\n    });\r\n  }\r\n\r\n  // Function to disable form\r\n  disableForm() {\r\n    this.form.controls['username'].disable(); // Disable username field\r\n    this.form.controls['password'].disable(); // Disable password field\r\n  }\r\n\r\n  // Function to enable form\r\n  enableForm() {\r\n    this.form.controls['username'].enable(); // Enable username field\r\n    this.form.controls['password'].enable(); // Enable password field\r\n  }\r\n\r\n  // Functiont to submit form and login user\r\n  onLoginSubmit() {\r\n    this.processing = true; // Used to submit button while is being processed\r\n    this.disableForm(); // Disable form while being process\r\n    // Create user object from user's input\r\n    const user = {\r\n      username: this.form.get('username').value, // Username input field\r\n      password: this.form.get('password').value // Password input field\r\n    }\r\n\r\n    // Function to send login data to API\r\n    this.authService.login(user).subscribe(data => {\r\n      // Check if response was a success or error\r\n      if (!data['success']) {\r\n        this.messageClass = 'alert alert-danger'; // Set bootstrap error class\r\n        this.message = data['message']; // Set error message\r\n        this.processing = false; // Enable submit button\r\n        this.enableForm(); // Enable form for editting\r\n      } else {\r\n        this.messageClass = 'alert alert-success'; // Set bootstrap success class\r\n        this.message = data['message']; // Set success message\r\n       this.authService.storeUserData(data['token'], data['user'])\r\n        // After 2 seconds, redirect to dashboard page\r\n        setTimeout(() => {\r\n          // Check if user was redirected or logging in for first time\r\n          if (this.previousUrl) {\r\n            this.router.navigate([this.previousUrl]); // Redirect to page they were trying to view before\r\n          } else {\r\n            this.router.navigate(['viewer']); // Navigate to dashboard view\r\n          }\r\n          this.internalService.loadData();\r\n        }, 500);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    // On page load, check if user was redirected to login\r\n    if (this.authGuard.redirectUrl) {\r\n      this.messageClass = 'alert alert-danger'; // Set error message: need to login\r\n      this.message = 'You must be logged in to view that page.'; // Set message\r\n      this.previousUrl = this.authGuard.redirectUrl; // Set the previous URL user was redirected from\r\n      this.authGuard.redirectUrl = undefined; // Erase previous URL\r\n    }\r\n  }\r\n}","module.exports = \".spacer{\\r\\n    flex: 1 1 auto;\\r\\n   \\r\\n}\\r\\n\"","module.exports = \"<mat-toolbar>\\n  <mat-toolbar-row>\\n    <span class='spacer'></span>\\n    <button mat-button *ngIf=\\\"selectedContext._id != selectedThought._id\\\"> {{ selectedContext.label }}</button>\\n    <button mat-raised-button> {{ selectedThought.label }}</button>\\n    <span class='spacer'></span>\\n  </mat-toolbar-row>\\n</mat-toolbar>\"","import { Component, OnInit } from '@angular/core';\nimport { InternalService } from '../../services/internal.service';\n\n@Component({\n  selector: 'app-middlebar',\n  templateUrl: './middlebar.component.html',\n  styleUrls: ['./middlebar.component.css']\n})\nexport class MiddlebarComponent implements OnInit {\n  selectedContext;\n  selectedThought;\n  constructor(private internalService: InternalService) { }\n\n  ngOnInit() {\n    this.internalService.selectedContextObs.subscribe(context => this.selectedContext = context);\n    \n    this.internalService.selectedThoughtObs.subscribe(thought => this.selectedThought = thought);\n  }\n\n}\n","module.exports = \"#navbar {\\r\\n  width: 100%;\\r\\n  height: 200px;\\r\\n  background-color: lightblue;\\r\\n}\\r\\n\"","module.exports = \"<div id=\\\"navbar\\\"></div>\\r\\n\\r\\n    \"","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Thought } from '../../models/thought';\r\nimport { DataSet, Network, Node, Edge } from 'vis';\r\nimport { InternalService } from '../../services/internal.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { User } from '../../models/user';\r\nimport { DataService } from '../../services/data.service';\r\nimport { DrawNavbarService } from '../../services/draw-navbar.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n  nodes = new DataSet([\r\n  ]);\r\n  edges = new DataSet([\r\n  ]);\r\n  data = {\r\n    nodes: this.nodes,\r\n    edges: this.edges\r\n  };\r\n  options;\r\n  \r\n  network;\r\n  constructor(public internalService: InternalService, public drawNavbarService: DrawNavbarService) { }\r\n\r\n\r\n\r\n\r\n  ngOnInit() {\r\n    this.internalService.loadData();\r\n    this.drawNavbarService.navbarNodesObs.subscribe(nodes => this.data.nodes = nodes);\r\n    this.drawNavbarService.navbarEdgesObs.subscribe(edges => this.data.edges = edges);\r\n    this.drawNavbarService.navbarOptionsObs.subscribe(options => this.options = options);\r\n    var  container = document.getElementById('navbar');\r\n    this.network = new Network(container, this.data, this.options);\r\n    \r\n\r\n    //0 = InfinityCloud, 1 = Other Rooms, 2 = selected Room, 3 = User + UserDimensions, 4 = networks, 5 = public, 6 = Rooms, 7 = Friends, 8 = SelectedRoom.Contents\r\n    //this.network.on(\"click\", params => {\r\n    //console.log(params);\r\n    // this.showContentNodes(this.nodes.get(params.nodes[0]));\r\n    //});\r\n\r\n    // this.network.on('click', params => {\r\n    //   if(params.nodes.length > 0){\r\n    //   const selectedNode = this.nodes.get(params.nodes[0])\r\n    //   if (selectedNode['id'] == this.user._id) {  // If clickOn User: Draw/Remove User Content\r\n    //     if (this.showUserContent) {\r\n    //       this.drawNavbarService.removeUserContent();\r\n    //       this.showUserContent = false;\r\n    //     } else {\r\n    //       this.drawNavbarService.drawUserContent();\r\n    //       this.showUserContent = true;\r\n    //     }\r\n    //   } else if (selectedNode['id'] == 4) { // If clickOn Networks: Draw/Remove My Networks\r\n    //     if (this.showMyNetworks) {\r\n    //       this.drawNavbarService.removeMyNetworks();\r\n    //       this.showMyNetworks = false;\r\n    //     } else {\r\n    //       this.drawNavbarService.drawMyNetworks();\r\n    //       this.showMyNetworks = true;\r\n    //     }\r\n    //   } else if (selectedNode['id'] == 5) {   //If clickOn MyRooms Draw/Remove MyRooms\r\n    //     if (this.showMyRooms) {\r\n    //       this.drawNavbarService.removeMyRooms();\r\n    //       this.showMyRooms = false;\r\n    //     } else {\r\n    //       this.drawNavbarService.drawMyRooms();\r\n    //       this.showMyRooms = true;\r\n    //     }\r\n    //   } else if (selectedNode['id'] == 6) { //If clickOn Friends Draw/Remove Friends\r\n    //     if (this.showMyFriends) {\r\n    //       this.drawNavbarService.removeMyFriends();\r\n    //       this.showMyFriends = false;\r\n    //     } else {\r\n    //       this.drawNavbarService.drawMyFriends();\r\n    //       this.showMyFriends = true;\r\n    //     }\r\n    //   } else if (selectedNode['group'] == 3) {    //If ClickOn My Thoughts (MyNetworks and below)\r\n\r\n    //     if(this.showThoughts.length > 0){\r\n    //     const selectedThought = this.showThoughts.filter(thought => thought._id == selectedNode['id'])\r\n    //     if (selectedThought.length > 0) {\r\n    //       this.drawNavbarService.removeThoughtContent(selectedThought[0]);\r\n    //     } else {\r\n    //       this.drawNavbarService.drawThoughtContent(selectedNode['id']);\r\n    //       this.internalService.changeThought(selectedNode['id']);\r\n    //     }\r\n    //   } else {\r\n    //     this.drawNavbarService.drawThoughtContent(selectedNode['id']);\r\n    //     this.internalService.changeThought(selectedNode['id']);\r\n    //   } \r\n\r\n    //   } else if (selectedNode['group'] == 4) {    \r\n    //     var roomId = selectedNode['id'].substring(0, selectedNode['id'].length() - 5); //remove the \"-Link\" Addon\r\n    //     this.internalService.changeRoom(roomId)\r\n    //   }\r\n    // }\r\n    // });\r\n    // this.network.on('doubleClick', params => {\r\n    //   if(params.nodes.length > 0){\r\n    //   const selectedNode = this.nodes.get(params.nodes[0])\r\n    //   if (selectedNode['group'] = 4) {\r\n    //     this.internalService.changeRoom(selectedNode['id']);\r\n    //   } else if (selectedNode['group'] = 5) {\r\n    //     console.log(\"you dblClicked Friends!\")\r\n    //   }\r\n    // }\r\n    // })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","module.exports = \"\"","module.exports = \"<mat-accordion>\\r\\n  <mat-expansion-panel>\\r\\n    <mat-expansion-panel-header>\\r\\n      <mat-panel-title>\\r\\n        <p>{{ selectedPerspective.label }}</p>\\r\\n      </mat-panel-title>\\r\\n      <mat-panel-description>\\r\\n        Open for other Perspectives\\r\\n      </mat-panel-description>\\r\\n    </mat-expansion-panel-header>\\r\\n    <mat-list>\\r\\n      <div *ngFor=\\\"let perspective of perspectives\\\">\\r\\n        <mat-list-item>\\r\\n          <button mat-button (click)=\\\"changePerspective(perspective)\\\">{{ perspective.label }}</button>\\r\\n        </mat-list-item>\\r\\n      </div>\\r\\n      <mat-divider></mat-divider>\\r\\n      <button mat-button (click)=\\\"newPerspective()\\\">New Perspective</button>\\r\\n    </mat-list>\\r\\n  </mat-expansion-panel>\\r\\n</mat-accordion>\\r\\n\\r\\n\\r\\n<div>\\r\\n  <mat-accordion>\\r\\n    <mat-expansion-panel>\\r\\n      <mat-expansion-panel-header>\\r\\n        <mat-panel-title>\\r\\n          Levels\\r\\n        </mat-panel-title>\\r\\n        <mat-panel-description>\\r\\n          Show only certain Levels\\r\\n        </mat-panel-description>\\r\\n      </mat-expansion-panel-header>\\r\\n      <mat-list *ngIf=\\\"dimensions\\\">\\r\\n        <mat-list-item *ngFor=\\\"let levelDim of allDimensions.levelDimensions\\\">\\r\\n          <button mat-button (click)=\\\"toggleLevel(levelDim)\\\">{{ levelDim.label }} (Level {{ levelDim.level }})</button>\\r\\n        </mat-list-item>\\r\\n      </mat-list>\\r\\n    </mat-expansion-panel>\\r\\n  </mat-accordion>\\r\\n\\r\\n  <mat-accordion>\\r\\n    <mat-expansion-panel>\\r\\n      <mat-expansion-panel-header>\\r\\n        <mat-panel-title>\\r\\n          Tag dimensions\\r\\n        </mat-panel-title>\\r\\n      </mat-expansion-panel-header>\\r\\n      <mat-list *ngIf=\\\"dimensions\\\">\\r\\n        <mat-list-item *ngFor=\\\"let tagDim of allDimensions.tagDimensions\\\">\\r\\n          <button mat-button>{{ tagDim.label }}:\\r\\n            <p *ngFor=\\\"let tag of tagDim.tags\\\">{{ tag }} </p>\\r\\n          </button>\\r\\n        </mat-list-item>\\r\\n      </mat-list>\\r\\n    </mat-expansion-panel>\\r\\n  </mat-accordion>\\r\\n\\r\\n\\r\\n  <mat-accordion>\\r\\n    <mat-expansion-panel>\\r\\n      <mat-expansion-panel-header>\\r\\n        <mat-panel-title>\\r\\n          Time dimensions\\r\\n        </mat-panel-title>\\r\\n        <mat-panel-description>\\r\\n        </mat-panel-description>\\r\\n      </mat-expansion-panel-header>\\r\\n      <mat-list *ngIf=\\\"dimensions\\\">\\r\\n        <mat-list-item *ngFor=\\\"let dateDim of allDimensions.dateDimensions\\\">\\r\\n          <button mat-button (click)=\\\"toggleDate(dateDim)\\\">{{ dateDim.label }}: </button>\\r\\n        </mat-list-item>\\r\\n      </mat-list>\\r\\n    </mat-expansion-panel>\\r\\n  </mat-accordion>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  <mat-accordion>\\r\\n    <mat-expansion-panel>\\r\\n      <mat-expansion-panel-header>\\r\\n        <mat-panel-title>\\r\\n          Numeric dimensions\\r\\n        </mat-panel-title>\\r\\n      </mat-expansion-panel-header>\\r\\n      <mat-list *ngIf=\\\"dimensions\\\">\\r\\n        <mat-list-item *ngFor=\\\"let numberDim of allDimensions.numberDimensions\\\">\\r\\n          <button mat-button (click)=\\\"toggleNumber(numberDim)\\\">{{ numberDim.label }}: </button>\\r\\n        </mat-list-item>\\r\\n      </mat-list>\\r\\n    </mat-expansion-panel>\\r\\n  </mat-accordion>\\r\\n  <form>\\r\\n      <mat-form-field>\\r\\n        <input matInput placeholder=\\\"New\\\" aria-label=\\\"selectedPerspective.label\\\" [formControl]=\\\"label\\\">\\r\\n      </mat-form-field>\\r\\n      <button mat-raised-button (click)=\\\"savePerspective()\\\">Save Perspective</button>\\r\\n    </form>\\r\\n  \\r\\n</div>\"","import { Component, OnInit, AfterContentInit } from '@angular/core';\r\nimport { InternalService } from '../../services/internal.service';\r\nimport { Dimensions } from '../../models/Dimensions/dimensions';\r\nimport { Perspective } from '../../models/perspective';\r\nimport { LevelDimension } from '../../models/Dimensions/levelDimension';\r\nimport { DateDimension } from '../../models/Dimensions/dateDimension';\r\nimport { User } from '../../models/user';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { NumberDimension } from '../../models/Dimensions/numberDimension';\r\nimport { TagDimension } from '../../models/Dimensions/tagDimension';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Thought } from '../../models/thought';\r\nimport { DataService } from '../../services/data.service';\r\n\r\n@Component({\r\n  selector: 'app-perspective',\r\n  templateUrl: './perspective.component.html',\r\n  styleUrls: ['./perspective.component.css']\r\n})\r\nexport class PerspectiveComponent implements OnInit, AfterContentInit {\r\n  label;\r\n  panelOpenState: boolean = false;\r\n  allDimensions: Dimensions;\r\n  selectedDimensions: Dimensions;\r\n  perspectives: Perspective[];\r\n  selectedPerspective: Perspective;\r\n  user: User;\r\n  selectedContext: Thought;\r\n\r\n  constructor(private internalService: InternalService, private authService: AuthService, private dataService: DataService) { }\r\n  toggleLevel(levelDim: LevelDimension) {\r\n    var newLevelDimensions: LevelDimension[] = [];\r\n    this.selectedPerspective.dimensions.levelDimensions.forEach(dim => {\r\n      if (dim.objId != levelDim.objId) {\r\n        newLevelDimensions.push(dim);\r\n      }\r\n    });\r\n    var newPerspective: Perspective = this.selectedPerspective;\r\n    newPerspective.dimensions.levelDimensions = newLevelDimensions;\r\n    console.log(newPerspective);\r\n    this.internalService.changePerspective(newPerspective);\r\n  }\r\n\r\n\r\n  toggleDate(dateDim: DateDimension) {\r\n    var newDateDimensions: DateDimension[] = [];\r\n    this.selectedPerspective.dimensions.dateDimensions.forEach(dim => {\r\n      if (dim.label != dateDim.label) {\r\n        newDateDimensions.push(dim);\r\n      }\r\n    });\r\n    var newPerspective: Perspective = this.selectedPerspective;\r\n\r\n    newPerspective.dimensions.dateDimensions = newDateDimensions;\r\n    console.log(newPerspective);\r\n    this.internalService.changePerspective(newPerspective);\r\n  }\r\n\r\n  toggleNumber(numberDim: NumberDimension) {\r\n    var newNumberDimensions: NumberDimension[] = [];\r\n    var found = false;\r\n    this.selectedPerspective.dimensions.numberDimensions.forEach(dim => {\r\n      if (dim.label != numberDim.label) {\r\n        newNumberDimensions.push(dim);\r\n      } else found = true;\r\n        });\r\n    if (!found) newNumberDimensions.push(numberDim)\r\n    var newPerspective: Perspective = this.selectedPerspective;\r\n    newPerspective.dimensions.numberDimensions = newNumberDimensions;\r\n    console.log(newPerspective);\r\n    this.internalService.changePerspective(newPerspective);\r\n  }\r\n\r\n  \r\n  toggleTag(tagDim: TagDimension) {\r\n    var newTagDimensions: TagDimension[] = [];\r\n    this.selectedPerspective.dimensions.tagDimensions.forEach(dim => {\r\n      if (dim.label != tagDim.label) {\r\n        newTagDimensions.push(dim);\r\n      }\r\n    });\r\n    var newPerspective: Perspective = this.selectedPerspective;\r\n    newPerspective.label = \"custom Perspective\";\r\n    newPerspective.dimensions.tagDimensions = newTagDimensions;\r\n    console.log(newPerspective);\r\n    this.internalService.changePerspective(newPerspective);\r\n  }\r\n\r\n  newPerspective() {\r\n    var perspective = this.selectedPerspective;\r\n    perspective.label = \"specialCode!\"\r\n    this.internalService.changePerspective(perspective);\r\n  }\r\n\r\n  savePerspective() {\r\n    var newPerspective: Perspective = this.selectedPerspective\r\n    if(this.label){ this.selectedPerspective.label = this.label.value}\r\n    newPerspective.dimensions = this.selectedDimensions;\r\n    this.dataService.newPerspective(newPerspective).subscribe(data => {\r\n    this.selectedPerspective._id = data['perspective']._id;\r\n    var newUser: User = this.user;\r\n    \r\n    if(!newUser.starterPerspectives) newUser.starterPerspectives = [];\r\n    newUser.starterPerspectives.unshift(this.selectedPerspective._id);\r\n    if(!newUser.lastPerspectives) newUser.lastPerspectives = [];\r\n    newUser.lastPerspectives.unshift(this.selectedPerspective._id);\r\n    this.authService.editUser(newUser).subscribe(data => {});\r\n  })\r\n  }\r\n  changePerspective(perspective) {\r\n    this.internalService.changePerspective(perspective);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.label = new FormControl();\r\n    this.internalService.selectedUserObs.subscribe(user => this.user = user);\r\n    this.internalService.selectedContextObs.subscribe(context => this.selectedContext = context);\r\n    this.internalService.selectedPerspectivesObs.subscribe(perspectives => this.perspectives = perspectives)\r\n    this.internalService.allDimensionsObs.subscribe(alldims => this.allDimensions = alldims);\r\n    this.internalService.selectedDimensionsObs.subscribe(dimensions => this.selectedDimensions = dimensions);\r\n\r\n   \r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.internalService.selectedPerspectiveObs.subscribe(perspective => {\r\n      console.log(perspective)\r\n      if (perspective != null) { this.selectedPerspective = perspective }\r\n      else {\r\n        var allDimens = this.internalService.allDimensions.getValue();\r\n        console.log(allDimens);\r\n        this.selectedPerspective = {\r\n          objId: this.selectedContext._id,\r\n          label: \"New Perspective\",\r\n          dimensions: this.allDimensions\r\n        }\r\n        console.log(this.allDimensions);\r\n      }\r\n      console.log(this.selectedPerspective);\r\n    });\r\n\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<mat-card>\\r\\n  <mat-card-title>\\r\\n    Welcome to the infinity Cloud...\\r\\n  </mat-card-title>\\r\\n  <mat-card-content>\\r\\n    <mat-horizontal-stepper [linear]=\\\"true\\\" #stepper=\\\"matHorizontalStepper\\\">\\r\\n      <mat-step [stepControl]=\\\"firstFormGroup\\\">\\r\\n        <form [formGroup]=\\\"firstFormGroup\\\" (ngSubmit)=\\\"onRegisterSubmit()\\\">\\r\\n          <ng-template matStepLabel>Create a User</ng-template>\\r\\n          <mat-form-field [ngClass]=\\\"{'has-error': (firstFormGroup.controls.username.errors && firstFormGroup.controls.username.dirty) || (!usernameValid && firstFormGroup.controls.username.dirty), 'has-success': !firstFormGroup.controls.username.errors && usernameValid}\\\">\\r\\n            <input matInput placeholder=\\\"Username\\\" class=\\\"form-control\\\" formControlName=\\\"username\\\" (blur)=\\\"checkUsername()\\\" required>\\r\\n          </mat-form-field>\\r\\n          <!-- Add Visualisation of User and Colorchooser Later -->\\r\\n          <ul class=\\\"help-block\\\">\\r\\n            <li *ngIf=\\\"firstFormGroup.controls.username.errors?.required && firstFormGroup.controls.username.dirty\\\">This field is required</li>\\r\\n            <li *ngIf=\\\"firstFormGroup.controls.username.errors?.minlength && firstFormGroup.controls.username.dirty || firstFormGroup.controls.username.errors?.maxlength && firstFormGroup.controls.username.dirty \\\">Minimum characters: 3, Maximum characters: 15</li>\\r\\n            <li *ngIf=\\\"firstFormGroup.controls.username.errors?.validateUsername && firstFormGroup.controls.username.dirty\\\">Username must not have any special characters</li>\\r\\n            <li *ngIf=\\\"usernameMessage\\\">{{ usernameMessage }}</li>\\r\\n          </ul>\\r\\n\\r\\n          <mat-form-field [ngClass]=\\\"{'has-error': (firstFormGroup.controls.email.errors && firstFormGroup.controls.email.dirty) || (!emailValid && firstFormGroup.controls.email.dirty), 'has-success': !firstFormGroup.controls.email.errors && emailValid}\\\">\\r\\n            <input matInput placeholder=\\\"E-Mail\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" formControlName=\\\"email\\\" (blur)=\\\"checkEmail()\\\"\\r\\n              required>\\r\\n          </mat-form-field>\\r\\n          <ul class=\\\"help-block\\\">\\r\\n            <li *ngIf=\\\"firstFormGroup.controls.email.errors?.required && firstFormGroup.controls.email.dirty\\\">This field is required</li>\\r\\n            <li *ngIf=\\\"(firstFormGroup.controls.email.errors?.minlength && firstFormGroup.controls.email.dirty || firstFormGroup.controls.email.errors?.maxlength && firstFormGroup.controls.email.dirty ) && firstFormGroup.controls.email.dirty\\\">Minimum characters: 5, Maximum characters: 30</li>\\r\\n            <li *ngIf=\\\"firstFormGroup.controls.email.errors?.validateEmail && firstFormGroup.controls.email.dirty\\\">This must be a valid e-mail</li>\\r\\n            <li *ngIf=\\\"emailMessage\\\">{{ emailMessage}}</li>\\r\\n          </ul>\\r\\n          <mat-form-field [ngClass]=\\\"{'has-error': (firstFormGroup.controls.password.errors && firstFormGroup.controls.password.dirty), 'has-success': !firstFormGroup.controls.password.errors}\\\">\\r\\n            <input type=\\\"password\\\" matInput placeholder=\\\"Password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" required>\\r\\n          </mat-form-field>\\r\\n          <ul class=\\\"help-block\\\">\\r\\n            <li *ngIf=\\\"firstFormGroup.controls.password.errors?.required && firstFormGroup.controls.password.dirty\\\">This field is required</li>\\r\\n          </ul>\\r\\n          <mat-form-field [ngClass]=\\\"{'has-error': (firstFormGroup.controls.confirm.errors && firstFormGroup.controls.confirm.dirty) || (firstFormGroup.errors?.matchingPasswords && firstFormGroup.controls.confirm.dirty), 'has-success': !firstFormGroup.controls.confirm.errors && !firstFormGroup.errors?.matchingPasswords}\\\">\\r\\n            <input type=\\\"password\\\" matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirm\\\" required>\\r\\n          </mat-form-field>\\r\\n          <ul class=\\\"help-block\\\">\\r\\n            <li *ngIf=\\\"firstFormGroup.controls.confirm.errors?.required && firstFormGroup.controls.confirm.dirty\\\">This field is required</li>\\r\\n            <li *ngIf=\\\"firstFormGroup.errors?.matchingPasswords && firstFormGroup.controls.confirm.dirty\\\">Password do not match</li>\\r\\n          </ul>\\r\\n          <div>\\r\\n            <br>\\r\\n            <button mat-raised-button color=\\\"primary\\\" matStepperNext type=\\\"submit\\\" value=\\\"Submit\\\">Register</button>\\r\\n          </div>\\r\\n        </form>\\r\\n      </mat-step>\\r\\n      <mat-step [stepControl]=\\\"secondFormGroup\\\">\\r\\n      <ng-template matStepLabel>Tutorial I</ng-template>\\r\\n      <p> We really planned to to a tutorial here, as well as other stuff we couldn't finish in time. But time is short. Here is the\\r\\n        main idea:\\r\\n      </p>\\r\\n      <ul>\\r\\n        <li>\\r\\n         Welcome to our infinite cloud of Complexity: The Complexity App, which is basically an infinite complex network.\\r\\n          Wherever you are in this network, you can create your own multidimensional Objects, which we call \\\"Thoughts\\\". \\r\\n        </li>\\r\\n        <li>\\r\\n          Thoughts can usually be found in the context <i>(or as the content)</i> of other Thoughts. Together, they constitute a theoretically infinite\\r\\n          network of all kinds of information. \\r\\n        </li>\\r\\n        <li>\\r\\n        In reality though, our thoughts are much more complex. They are connected through several dimensions at the same time, which is obviously hard to imagine. \\r\\n        This is where our App comes in! ;)\\r\\n        </li>\\r\\n      </ul>\\r\\n\\r\\n      <button mat-raised-button color=\\\"primary\\\" matStepperNext type=\\\"submit\\\" value=\\\"Submit\\\">What's this App?</button>\\r\\n\\r\\n      </mat-step>\\r\\n      <mat-step [stepControl]=\\\"thirdFormGroup\\\">\\r\\n        <ng-template matStepLabel>Tutorial II</ng-template>\\r\\n        <p> Our app lets you create infinite complex networks, without ever having to think more than few connections at a time. You can create your own thought-networks and add as many dimensions to each thought, as u want.  \\r\\n          Our App takes care of the difficult calculations, and will let you navigate <i>with ease</i> trough really complex networks. Instead of trying to understand multidimensional networks, we let you navigate through different Dimensions, by creating your own perspectives.\\r\\n          In short: </p>\\r\\n        <mat-list>\\r\\n          <mat-list-item>\\r\\n            <button mat-button color=\\\"primary\\\">Create</button>\\r\\n            <button mat-button>Create New Thoughts and add as many Dimensions as you want.</button>\\r\\n          </mat-list-item>\\r\\n          <mat-list-item>\\r\\n            <button mat-button color=\\\"primary\\\">Visualise</button>\\r\\n            <button mat-button>Play around with different Settings for your Perspectives, and see things from Angles you have never seen before.</button>\\r\\n          </mat-list-item>\\r\\n          <mat-list-item>\\r\\n            <button mat-button color=\\\"primary\\\">Much more to follow</button>\\r\\n            <button mat-button>Work together with your friends, a better Design and a much better UserInterface to come!</button>\\r\\n          </mat-list-item>\\r\\n        </mat-list>\\r\\n        <p> We would love to hear your feedback! Noah und Boas</p>\\r\\n        <div>\\r\\n          <br>\\r\\n          <br>\\r\\n          <button mat-raised-button matStepperNext color=\\\"primary\\\" type=\\\"submit\\\" (click)=\\\"onTutorialFinish()\\\" value=\\\"Submit\\\">Let's have a look!</button>\\r\\n        </div>\\r\\n      </mat-step>\\r\\n    </mat-horizontal-stepper>\\r\\n  </mat-card-content>\\r\\n</mat-card>\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { DataService } from '../../services/data.service';\r\nimport { Thought } from '../../models/thought';\r\nimport { InternalService } from '../../services/internal.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  form;\r\n  message;\r\n  messageClass;\r\n  processing = false;\r\n  emailValid;\r\n  emailMessage;\r\n  usernameValid;\r\n  usernameMessage;\r\n  userId;\r\n  firstFormGroup: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private dataService: DataService,\r\n    private router: Router,\r\n    private internalService: InternalService\r\n  ) {\r\n  }\r\n\r\n  // Function to create registration form\r\n\r\n\r\n  // Function to disable the registration form\r\n  disableForm() {\r\n    this.firstFormGroup.controls['email'].disable();\r\n    this.firstFormGroup.controls['username'].disable();\r\n    this.firstFormGroup.controls['password'].disable();\r\n    this.firstFormGroup.controls['confirm'].disable();\r\n  }\r\n\r\n  // Function to enable the registration form\r\n  enableForm() {\r\n    this.firstFormGroup.controls['email'].enable();\r\n    this.firstFormGroup.controls['username'].enable();\r\n    this.firstFormGroup.controls['password'].enable();\r\n    this.firstFormGroup.controls['confirm'].enable();\r\n  }\r\n\r\n  // Function to validate e-mail is proper format\r\n  validateEmail(controls) {\r\n    // Create a regular expression\r\n    const regExp = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n    // Test email against regular expression\r\n    if (regExp.test(controls.value)) {\r\n      return null; // Return as valid email\r\n    } else {\r\n      return { 'validateEmail': true } // Return as invalid email\r\n    }\r\n  }\r\n\r\n  // Function to validate username is proper format\r\n  validateUsername(controls) {\r\n    // Create a regular expression\r\n    const regExp = new RegExp(/^[a-zA-Z0-9]+$/);\r\n    // Test username against regular expression\r\n    if (regExp.test(controls.value)) {\r\n      return null; // Return as valid username\r\n    } else {\r\n      return { 'validateUsername': true } // Return as invalid username\r\n    }\r\n  }\r\n\r\n  // Function to validate password\r\n  validatePassword(controls) {\r\n    // Create a regular expression\r\n    const regExp = new RegExp(/^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[\\d])(?=.*?[\\W]).{8,35}$/);\r\n    // Test password against regular expression\r\n    if (regExp.test(controls.value)) {\r\n      return null; // Return as valid password\r\n    } else {\r\n      return { 'validatePassword': true } // Return as invalid password\r\n    }\r\n  }\r\n\r\n  // Funciton to ensure passwords match\r\n  matchingPasswords(password, confirm) {\r\n    return (group: FormGroup) => {\r\n      // Check if both fields are the same\r\n      if (group.controls[password].value === group.controls[confirm].value) {\r\n        return null; // Return as a match\r\n      } else {\r\n        return { 'matchingPasswords': true } // Return as error: do not match\r\n      }\r\n    }\r\n  }\r\n\r\n  // Function to submit form\r\n  onRegisterSubmit() {\r\n    this.processing = true;\r\n    this.disableForm();\r\n\r\n    //Create Starter Object\r\n\r\n    // Create user object form user's inputs\r\n    const user = {\r\n      email: this.firstFormGroup.get('email').value, // E-mail input field\r\n      username: this.firstFormGroup.get('username').value, // Username input field\r\n      password: this.firstFormGroup.get('password').value // Password input field\r\n    }\r\n\r\n    this.authService.registerUser(user).subscribe(data => {\r\n      if (!data['success']) {\r\n        this.messageClass = 'alert alert-danger';\r\n        this.message = data['message'];\r\n        this.processing = false;\r\n        this.enableForm();\r\n      } else {\r\n        this.messageClass = 'alert alert-success';\r\n        this.message = data['message'];\r\n        this.userId = data['user']._id;\r\n\r\n        //Login User \r\n        const user = {\r\n          username: this.firstFormGroup.get('username').value, // Username input field\r\n          password: this.firstFormGroup.get('password').value // Password input field\r\n        }\r\n\r\n        // Function to send login data to API\r\n        this.authService.login(user).subscribe(data => {\r\n          this.authService.storeUserData(data['token'], data['user'])\r\n\r\n              this.internalService.loadData();\r\n            })\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  onTutorialFinish(){\r\n    this.router.navigate(['viewer']);\r\n  }\r\n  \r\n  // Function to check if e-mail is taken\r\n  checkEmail() {\r\n    // Function from authentication file to check if e-mail is taken\r\n    this.authService.checkEmail(this.firstFormGroup.get('email').value).subscribe(data => {\r\n      // Check if success true or false was returned from API\r\n      if (!data['success']) {\r\n        this.emailValid = false; // Return email as invalid\r\n        this.emailMessage = data['message']; // Return error message\r\n      } else {\r\n        this.emailValid = true; // Return email as valid\r\n        this.emailMessage = data['message']; // Return success message\r\n      }\r\n    });\r\n  }\r\n\r\n  // Function to check if username is available\r\n  checkUsername() {\r\n    // Function from authentication file to check if username is taken\r\n    this.authService.checkUsername(this.firstFormGroup.get('username').value).subscribe(data => {\r\n      // Check if success true or success false was returned from API\r\n      if (!data['success']) {\r\n        this.usernameValid = false; // Return username as invalid\r\n        this.usernameMessage = data['message']; // Return error message\r\n      } else {\r\n        this.usernameValid = true; // Return username as valid\r\n        this.usernameMessage = data['message']; // Return success message\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.firstFormGroup = this.formBuilder.group({\r\n      email: ['', Validators.compose([\r\n        Validators.required, // Field is required\r\n        Validators.minLength(5), // Minimum length is 5 characters\r\n        Validators.maxLength(30), // Maximum length is 30 characters\r\n        this.validateEmail // Custom validation\r\n      ])],\r\n      // Username Input\r\n      username: ['', Validators.compose([\r\n        Validators.required, // Field is required\r\n        Validators.minLength(3), // Minimum length is 3 characters\r\n        Validators.maxLength(15), // Maximum length is 15 characters\r\n        this.validateUsername // Custom validation\r\n      ])],\r\n      // Password Input\r\n      password: ['', Validators.compose([\r\n        Validators.required, // Field is required\r\n      ])],\r\n      // Confirm Password Input\r\n      confirm: ['', Validators.required] // Field is required\r\n    }, { validator: this.matchingPasswords('password', 'confirm') }); // Add custom validator to form for matching passwords\r\n  }\r\n\r\n}","module.exports = \".spacer{\\r\\n    flex: 1 1 auto;\\r\\n   \\r\\n}\\r\\n\\r\\n.onTop{\\r\\n z-index: 10;\\r\\n position:absolute;\\r\\n}\\r\\n\\r\\n.bot{\\r\\nwidth: 100%;\\r\\nposition: fixed;\\r\\nbottom: 0;\\r\\n}\"","module.exports = \"<div>\\r\\n  <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\\\"newTrigger\\\" [cdkConnectedOverlayOpen]=\\\"showNew(tool)\\\">\\r\\n    <app-new (changeThoughtsOpen)=\\\"myThoughtsOpen($event)\\\"></app-new>\\r\\n  </ng-template>\\r\\n\\r\\n\\r\\n  <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\\\"trigger\\\" [cdkConnectedOverlayOpen]=\\\"showEdit(tool)\\\">\\r\\n    <app-edit></app-edit>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template  cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\\\"dimensionTrigger\\\" [cdkConnectedOverlayOpen]=\\\"showDimension(tool)\\\">\\r\\n      <app-dimension></app-dimension>\\r\\n    </ng-template>\\r\\n\\r\\n  <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\\\"searchTrigger\\\" [cdkConnectedOverlayOpen]=\\\"searchOpen\\\">\\r\\n    <app-search></app-search>\\r\\n  </ng-template>\\r\\n  \\r\\n\\r\\n\\r\\n  <mat-toolbar class=\\\"bot\\\" >\\r\\n    <mat-toolbar-row>\\r\\n        <span class='spacer'></span>\\r\\n        <button mat-button (click)=\\\"changeTool('new')\\\" cdkOverlayOrigin\\r\\n        #newTrigger=\\\"cdkOverlayOrigin\\\">\\r\\n        <i class=\\\"material-icons\\\">add_circle</i> New Thought</button>\\r\\n\\r\\n      <button mat-button  (click)=\\\"changeTool('dimension')\\\"\\r\\n        cdkOverlayOrigin #dimensionTrigger=\\\"cdkOverlayOrigin\\\">\\r\\n        <i class=\\\"material-icons\\\">add</i> Add Dimension</button>\\r\\n\\r\\n      <button mat-button (click)=\\\"changeTool('edit')\\\" cdkOverlayOrigin #trigger=\\\"cdkOverlayOrigin\\\">\\r\\n        <i class=\\\"material-icons\\\">create</i> Edit / Details</button>\\r\\n        <span class='spacer'></span>\\r\\n    </mat-toolbar-row>\\r\\n    <mat-toolbar-row>\\r\\n      <span class='spacer'></span>\\r\\n\\r\\n\\r\\n      <button mat-button  (click)=\\\"loadMyThoughts()\\\">\\r\\n        <i class=\\\"material-icons\\\">group_work</i> My Thoughts</button>\\r\\n\\r\\n\\r\\n     \\r\\n      \\r\\n      <button mat-button *ngIf=\\\"!authService.loggedIn()\\\" routerLink=\\\"../login\\\">\\r\\n        <i class=\\\"material-icons\\\">account_box</i> Login</button>\\r\\n      <button mat-button *ngIf=\\\"!authService.loggedIn()\\\" routerLink=\\\"../register\\\">\\r\\n        <i class=\\\"material-icons\\\">launch</i> Register</button>\\r\\n\\r\\n      <div *ngIf=\\\"user\\\">\\r\\n        <button mat-button *ngIf=\\\"!authService.loggedIn()\\\" matTooltip=\\\"{{ user.username | uppercase}}\\\">\\r\\n          <i class=\\\"material-icons\\\">account_circle</i> {{ user.username | uppercase}}</button>\\r\\n\\r\\n        <button mat-button *ngIf=\\\"authService.loggedIn()\\\" matTooltip=\\\"{{ user.username | uppercase}}\\\" [matMenuTriggerFor]=\\\"menu\\\">\\r\\n          <i class=\\\"material-icons\\\">account_circle</i> {{ user.username | uppercase}}</button>\\r\\n      </div>\\r\\n\\r\\n      <button mat-button matTooltip=\\\"Change Perspective\\\" (click)=\\\"changeTool('sidenav')\\\">\\r\\n        <i class=\\\"material-icons\\\">view_quilt</i> Change Perspective</button>\\r\\n\\r\\n      <button mat-button matTooltip=\\\"Search\\\" (click)=\\\"searchOpen = !searchOpen\\\" cdkOverlayOrigin #searchTrigger=\\\"cdkOverlayOrigin\\\">\\r\\n        <i class=\\\"material-icons\\\">search</i> Search</button>\\r\\n\\r\\n\\r\\n      <mat-menu #menu=\\\"matMenu\\\" [overlapTrigger]=\\\"false\\\">\\r\\n        <button *ngIf=\\\"authService.loggedIn\\\" mat-menu-item (click)=\\\"onLogoutClick()\\\">Logout</button>\\r\\n      </mat-menu>\\r\\n      <span class='spacer'></span>\\r\\n      <button mat-button>Complexity-App v.0.0.6</button>\\r\\n    </mat-toolbar-row>\\r\\n  </mat-toolbar>\\r\\n</div>\"","import { Component, OnInit, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { Thought } from '../../models/thought';\r\nimport { InternalService } from '../../services/internal.service';\r\nimport { User } from '../../models/user';\r\n\r\nimport {Directive, QueryList, ViewChildren} from '@angular/core';\r\nimport {ActiveDescendantKeyManager, Highlightable} from '@angular/cdk/a11y';\r\nimport { Output } from '@angular/core';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-toolbar',\r\n  templateUrl: './toolbar.component.html',\r\n  styleUrls: ['./toolbar.component.css']\r\n})\r\nexport class ToolbarComponent implements OnInit {\r\n  username; userId; starterId;\r\n  selectedThought: Thought;\r\n  user: User;\r\n  //Tools\r\n  showTool: String;\r\n  isOpen = false;\r\n  \r\n\r\n  constructor(private router: Router,\r\n    public authService: AuthService,\r\n    public internalService: InternalService) { }\r\n  \r\n  changeTool(tool: String) {\r\n    if (this.showTool == tool) {\r\n      this.showTool = \"none\";\r\n    } else {\r\n      this.showTool = tool;\r\n    }\r\n    this.internalService.changeTool(this.showTool);\r\n  }\r\n  \r\n  showNew(tool){\r\n    if (this.showTool == \"new\") return true;\r\n    else return false;\r\n  }\r\n  showEdit(tool){\r\n    if (this.showTool == \"edit\") return true;\r\n    else return false;\r\n  }\r\n  showDimension(tool){\r\n    if (this.showTool == \"dimension\") return true;\r\n    else return false;\r\n  }\r\n \r\n\r\n  loadMyThoughts(){\r\n    this.internalService.loadMyThoughts();\r\n  }\r\n  \r\n  onLogoutClick() {\r\n    this.internalService.clearAll();\r\n    this.authService.logout(); // Logout user\r\n    this.router.navigate(['/']); // Navigate back to home page\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.internalService.selectedUserObs.subscribe(res => this.user = res);\r\n    console.log(this.authService.loggedIn());\r\n    console.log(this.user);\r\n    this.internalService.selectedThoughtObs.subscribe(res => this.selectedThought = res);\r\n    console.log(this.selectedThought);\r\n\r\n    this.internalService.selectedToolObs.subscribe(res => this.showTool = res);\r\n  }\r\n\r\n}\r\n","module.exports = \".searchbar-form {\\r\\n    min-width: 600px;\\r\\n    max-width: 1000px;\\r\\n    width: 100%;\\r\\n  }\\r\\n  .searchbar-fullwidth {\\r\\n    width: 100%;\\r\\n}\"","module.exports = \"<div>\\r\\n  <mat-card class=\\\"details-selectedThought\\\">\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>Add a Dimension</mat-card-title>\\r\\n      <mat-card-subtitle>\\r\\n        <i>{{ selectedThought.label }}</i>\\r\\n      </mat-card-subtitle>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <mat-form-field>\\r\\n        <input matInput #label [(ngModel)]=\\\"newLabel\\\" name=\\\"newLabel\\\" placeholder=\\\"Enter a Label\\\">\\r\\n      </mat-form-field>\\r\\n\\r\\n      <form>\\r\\n        <button mat-button [matMenuTriggerFor]=\\\"menuDimensions\\\">Choose Type of Dimension</button>\\r\\n        <mat-menu #menuDimensions=\\\"matMenu\\\" [overlapTrigger]=\\\"false\\\">\\r\\n          <button mat-menu-item (click)=\\\"changeType('Date')\\\">\\r\\n            <i class=\\\"material-icons\\\">event</i> Date</button>\\r\\n          <button mat-menu-item (click)=\\\"changeType('Number')\\\">\\r\\n            <i class=\\\"material-icons\\\">timeline</i> Number</button>\\r\\n          <button mat-menu-item (click)=\\\"changeType('Tag')\\\">\\r\\n            <i class=\\\"material-icons\\\">flag</i> Tag</button>\\r\\n        </mat-menu>\\r\\n\\r\\n        <mat-form-field *ngIf=\\\"addDate\\\">\\r\\n          <input matInput [matDatepicker]=\\\"picker\\\" [(ngModel)]=\\\"newDate\\\" name=\\\"newDate\\\" placeholder=\\\"Choose a date\\\">\\r\\n          <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n          <mat-datepicker #picker></mat-datepicker>\\r\\n        </mat-form-field>\\r\\n        <mat-form-field *ngIf=\\\"addNumber\\\">\\r\\n          <input matInput #number [(ngModel)]=\\\"newNumber\\\" name=\\\"newNumber\\\" placeholder=\\\"Enter a Number\\\">\\r\\n        </mat-form-field>\\r\\n        <mat-form-field *ngIf=\\\"addTag\\\">\\r\\n          <input matInput #tag [(ngModel)]=\\\"newTag\\\" name=\\\"newTag\\\" placeholder=\\\"Add a Tag\\\">\\r\\n        </mat-form-field>\\r\\n      </form>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions  *ngIf=\\\"addTag || addNumber || addDate\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onDimensionSubmit()\\\">Add Dimension</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../../../services/data.service';\r\nimport { FormBuilder, FormControl } from '@angular/forms';\r\nimport { InternalService } from '../../../services/internal.service';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Thought } from '../../../models/thought';\r\nimport { User } from '../../../models/user';\r\nimport { startWith ,  map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-dimension',\r\n  templateUrl: './dimension.component.html',\r\n  styleUrls: ['./dimension.component.css']\r\n})\r\nexport class DimensionComponent implements OnInit {\r\n  newThought;\r\n  addDate;\r\n  addNumber;\r\n  addTag;\r\n  newDimension;\r\n  selectedThought;\r\n  user: User;\r\n  newLabel;\r\n  newDate;\r\n  newNumber: number;\r\n  newTag;\r\n\r\n  constructor(private dataService: DataService,\r\n    private formBuilder: FormBuilder,\r\n    private internalService: InternalService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    //Autocomplete\r\n    this.newThought = new FormControl();\r\n  }\r\n\r\n  onDimensionSubmit() {\r\n    //Create New Dimension\r\n     this.newDimension = {\r\n      user: this.user._id,\r\n      label: this.newLabel,\r\n      val: \"\"\r\n    }\r\n    const editThought: Thought = this.selectedThought; \r\n    //Create Value, depending on Input\r\n    if (this.addDate) { \r\n      this.newDimension.val = this.newDate;\r\n      this.selectedThought.dateDim.push(this.newDimension)\r\n     };\r\n    if (this.addNumber) { \r\n      this.newDimension.val = this.newNumber, \r\n      this.selectedThought.numberDim.push(this.newDimension)\r\n    };\r\n    if (this.addTag) { this.newDimension.val = this.newTag;\r\n      this.selectedThought.tagDim.push(this.newDimension) \r\n    };\r\n    //Update Selected Thought with new Dimensions\r\n    \r\n    \r\n    this.dataService.editThought(editThought).subscribe(data => {\r\n      //Update Dimension-Content with new Link\r\n      this.internalService.loadMyThoughts();\r\n    });\r\n  }\r\n\r\n  changeType(label: string) { // I know this is horrible... Just let me be^^\r\n    if (label == \"Number\") { this.addNumber = true; this.addDate = false; this.addTag = false; };\r\n    if (label == \"Date\") { this.addDate = true; this.addNumber = false; this.addTag = false; };\r\n    if (label == \"Tag\") { this.addDate = false; this.addNumber = false; this.addTag = true; };\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n  this.internalService.selectedThoughtObs.subscribe(res => this.selectedThought = res);\r\n  this.internalService.selectedUser.subscribe(res => this.user = res);\r\n\r\n\r\n  }\r\n} ","module.exports = \"\\r\\n    <mat-card *ngIf=\\\"selectedThought\\\">\\r\\n      <mat-card-header>\\r\\n        <mat-card-title>Details: {{ selectedThought.label }}</mat-card-title>\\r\\n        <mat-card-subtitle></mat-card-subtitle>\\r\\n      </mat-card-header>\\r\\n      <mat-card-content>\\r\\n          <mat-list *ngFor=\\\"let dDims of selectedThought.dateDim\\\">\\r\\n              <mat-list-item>{{ dDims.label }} : {{ dDims.val }}</mat-list-item>\\r\\n            </mat-list>\\r\\n            <mat-list *ngFor=\\\"let dDims of selectedThought.numberDim\\\">\\r\\n                    <mat-list-item>{{ dDims.label }} : {{ dDims.val }} </mat-list-item>\\r\\n                  </mat-list>\\r\\n                  <mat-list *ngFor=\\\"let dDims of selectedThought.tagDim\\\">\\r\\n                        <mat-list-item>{{ dDims.label }} : {{ dDims.val }}</mat-list-item>\\r\\n                      </mat-list>\\r\\n                \\r\\n      </mat-card-content>\\r\\n      <mat-card-actions>\\r\\n          <button mat-raised-button color=\\\"primary\\\" (click)=\\\"publish()\\\">Publish</button>\\r\\n          <button mat-raised-button color=\\\"primary\\\">Share</button>\\r\\n          <button mat-raised-button color=\\\"primary\\\">Delete</button>\\r\\n        </mat-card-actions>\\r\\n    </mat-card>\\r\\n\"","module.exports = \".spacer {\\n  flex: 1 1 auto; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\r\nimport { Thought } from '../../../models/thought';\r\nimport { InternalService } from '../../../services/internal.service';\r\nimport { DataService } from '../../../services/data.service';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit',\r\n  templateUrl: './edit.component.html',\r\n  styleUrls: ['./edit.component.scss']\r\n})\r\nexport class EditComponent implements OnInit {\r\n  editThought: FormControl;\r\n  selectedThought: Thought;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private internalService: InternalService,\r\n    private dataService: DataService,\r\n    private authService: AuthService,\r\n    private router: Router) {\r\n      this.editThought = new FormControl();\r\n     }\r\n\r\n     publish(){\r\n       const editedThought: Thought = this.selectedThought;\r\n       editedThought.public = true;\r\n\r\n       this.dataService.editThought(editedThought);\r\n     }\r\n\r\n    onEditSubmit() {\r\n      const editThought = {\r\n        _id: this.selectedThought._id,\r\n        editLabel: this.editThought.value\r\n      };\r\n      this.dataService.editThought(editThought).subscribe(data => {\r\n        this.internalService.changeSelectedThought(this.selectedThought._id);\r\n      });\r\n      \r\n    }\r\n\r\n\r\n\r\n  ngOnInit() {\r\n    this.internalService.selectedThoughtObs.subscribe(res => this.selectedThought = res);\r\n\r\n  }\r\n\r\n}\r\n","module.exports = \".searchbar-fullwidth {\\r\\n  width: 100%;\\r\\n}\\r\\n.searchbar-form {\\r\\n  min-width: 600px;\\r\\n  max-width: 1000px;\\r\\n  width: 100%;\\r\\n}\"","module.exports = \"<mat-card class=\\\"details-selectedThought\\\">\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>Add a new Thought</mat-card-title>\\r\\n      <mat-card-subtitle><i>{{ selectedThought.label }}</i></mat-card-subtitle>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <form class=\\\"searchbar-form\\\">\\r\\n            <mat-form-field class=\\\"searchbar-full-width\\\">\\r\\n              <input matInput placeholder=\\\"New\\\" aria-label=\\\"Thought\\\" [formControl]=\\\"newThought\\\">\\r\\n            </mat-form-field>\\r\\n          </form>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onNewSubmit()\\\">Save Thought</button>\\r\\n      </mat-card-actions>\\r\\n  </mat-card>\\r\\n\\r\\n\\r\\n \\r\\n  \\r\\n\\r\\n\\r\\n\\r\\n\"","import { Component, OnInit, ViewEncapsulation, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Location } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { Thought } from '../../../models/thought';\r\nimport { DataService } from '../../../services/data.service';\r\nimport { InternalService } from '../../../services/internal.service';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../../../models/user';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-new',\r\n  templateUrl: './new.component.html',\r\n  styleUrls: ['./new.component.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NewComponent implements OnInit {\r\n  @Output() backdropClick: EventEmitter<any> = new EventEmitter<MouseEvent>(); \r\n  newThought;\r\n  user: User;\r\n  selectedThought: Thought;\r\n  constructor(private dataService: DataService,\r\n    private formBuilder: FormBuilder,\r\n    private internalService: InternalService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  onNewSubmit() {\r\n    var newContext = [];\r\n    if (this.selectedThought.contexts) { //Check if Contexts exist\r\n      this.selectedThought.contexts.forEach(context => {\r\n        newContext.unshift(context)\r\n      });\r\n    }\r\n    if(this.selectedThought.label != \"My Thoughts\" && this.selectedThought._id != \"WelcomeThought\") {\r\n      newContext.unshift(this.selectedThought._id);\r\n    }\r\n\r\n    var newThought: Thought = {\r\n      label: this.newThought.value,\r\n      createdBy: { user: this.user._id, timestamp: new Date() },\r\n      contexts: newContext,\r\n      clicks: 0,\r\n      public: false\r\n    }\r\n\r\n    //check if Public\r\n    if (this.selectedThought.public) { newThought.public = true };\r\n    console.log(newThought);\r\n    this.dataService.newThought(newThought).subscribe(data => {\r\n     \r\n      if (this.selectedThought.label != \"My Thoughts\" && this.selectedThought._id != \"WelcomeThought\") {\r\n        this.selectedThought.contents.push(data['thought']._id);\r\n        \r\n       this.dataService.editThought(this.selectedThought).subscribe(data => {\r\n         \r\n       })\r\n      }\r\n    this.internalService.loadMyThoughts();\r\n   });\r\n  }\r\n\r\n\r\n\r\n\r\n  ngOnInit() {\r\n    this.newThought = new FormControl();\r\n    this.internalService.selectedUserObs.subscribe(res => this.user = res);\r\n    this.internalService.selectedThoughtObs.subscribe(res => this.selectedThought = res);\r\n\r\n\r\n  }\r\n}\r\n","module.exports = \"\\r\\n<mat-card>\\r\\n\\r\\n    <button mat-raised-button [matMenuTriggerFor]=\\\"menuDimensions\\\">Choose Search Area (Not yet implemented)</button>\\r\\n    <mat-menu #menuDimensions=\\\"matMenu\\\" [overlapTrigger]=\\\"false\\\">\\r\\n        <button mat-menu-item (click)=\\\"userSearch()\\\">\\r\\n            Public</button>\\r\\n      <button mat-menu-item (click)=\\\"privateSearch()\\\">\\r\\n       Private</button>\\r\\n      <button mat-menu-item (click)=\\\"userSearch()\\\">\\r\\n        Users</button>\\r\\n    </mat-menu>\\r\\n\\r\\n  <form class=\\\"search-form\\\">\\r\\n    <mat-form-field class=\\\"search-full-width\\\" >\\r\\n      <input matInput placeholder=\\\"Search\\\" aria-label=\\\"Thought\\\" [matAutocomplete]=\\\"auto\\\" [formControl]=\\\"thoughtCtrl\\\">\\r\\n      <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n        <mat-option *ngFor=\\\"let thought of filteredThoughts | async\\\" [value]=\\\"thought.label\\\" (click)=\\\"goToThought(thought)\\\">\\r\\n          <span>{{ thought.label }}</span>\\r\\n          <small *ngFor=\\\"let context of thought.contexts\\\"> | {{ context.label }}</small>\\r\\n        </mat-option>\\r\\n      </mat-autocomplete>\\r\\n    </mat-form-field>\\r\\n  </form>\\r\\n\\r\\n</mat-card>\"","module.exports = \".spacer {\\n  flex: 1 1 auto; }\\n\\n.search-form {\\n  display: flex;\\n  flex-direction: column;\\n  height: 80px;\\n  width: 700px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { FormControl, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { startWith ,  map } from 'rxjs/operators';\r\nimport { Thought } from '../../../models/thought';\r\nimport { DataService } from '../../../services/data.service';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { InternalService } from '../../../services/internal.service';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.scss']\r\n})\r\nexport class SearchComponent implements OnInit {\r\n  thoughts: Thought[];\r\n  lastInput: String;\r\n\r\n  //Autocomplete\r\n  thoughtCtrl: FormControl;\r\n  newThought: FormControl;\r\n  filteredThoughts: Observable<Thought[]>;\r\n  constructor(private dataService: DataService,\r\n    private formBuilder: FormBuilder,\r\n    private internalService: InternalService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    //Autocomplete\r\n    this.thoughtCtrl = new FormControl();\r\n    this.newThought = new FormControl();\r\n    this.filteredThoughts = this.thoughtCtrl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(thought => thought ? this.filterThoughts(thought) : this.thoughts.slice())\r\n      );\r\n\r\n  }\r\n\r\n  filterThoughts(label: string) {\r\n    this.lastInput = label;\r\n    return this.thoughts.filter(thought =>\r\n      thought.label.toLowerCase().indexOf(label.toLowerCase()) === 0);\r\n  }\r\n\r\n  \r\n  ngOnInit() {\r\n\r\n  }\r\n}\r\n\r\n","module.exports = \"\\r\\n#mainbar {\\r\\n    width: 100%;\\r\\n    height: 700px;\\r\\n    overflow: hidden;\\r\\n  }\\r\\n  \"","module.exports = \"<app-middlebar></app-middlebar>\\r\\n<div id=\\\"mainbar\\\"></div>\\r\\n\\r\\n  \"","import { Component, OnInit, Input, AfterContentInit } from '@angular/core';\r\nimport { Thought } from '../../models/thought';\r\nimport { DataService } from '../../services/data.service';\r\nimport { InternalService } from '../../services/internal.service';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { User } from '../../models/user';\r\nimport { Network, DataSet } from 'vis';\r\nimport { DrawViewerService } from '../../services/draw-viewer.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-viewer',\r\n  templateUrl: './viewer.component.html',\r\n  styleUrls: ['./viewer.component.css']\r\n})\r\nexport class ViewerComponent implements OnInit {\r\n  nodes = new DataSet([\r\n  ]);\r\n  edges = new DataSet([\r\n  ]);\r\n  data = {\r\n    nodes: this.nodes,\r\n    edges: this.edges\r\n  };\r\n  options;\r\n  network;\r\n\r\n\r\n   constructor(private dataService: DataService,\r\n               private internalService: InternalService,\r\n               private router: Router,\r\n              private authService: AuthService,\r\n               private drawViewerService: DrawViewerService) { }\r\n\r\n    ngOnInit() {\r\n    \r\n      this.drawViewerService.viewerNodesObs.subscribe(nodes => this.data.nodes = nodes);\r\n      this.drawViewerService.viewerEdgesObs.subscribe(edges => this.data.edges = edges);\r\n      this.drawViewerService.viewerOptionsObs.subscribe(options => this.options = options);\r\n      var  container = document.getElementById('mainbar');\r\n      this.network = new Network(container, this.data, this.options);\r\n      this.network.on(\"click\", params => {\r\n        if(params.nodes.length) { \r\n          this.internalService.changeSelectedThought(params.nodes[0]);\r\n        } else {\r\n          this.internalService.defaultSelectedThought();\r\n          this.internalService.changeTool('none');\r\n        }\r\n        });\r\n    }\r\n    \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  redirectUrl;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  // Function to check if user is authorized to view route\r\n  canActivate(\r\n    router: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ) {\r\n    // Check if user is logge din\r\n    if (this.authService.loggedIn()) {\r\n      return true; // Return true: User is allowed to view route\r\n    } else {\r\n      this.redirectUrl = state.url; // Grab previous urul\r\n      this.router.navigate(['/login']); // Return error and route to login page\r\n      return false; // Return false: user not authorized to view page\r\n    }\r\n  }\r\n}","\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class NotAuthGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  // Function to determine whether user is authorized to view route\r\n  canActivate() {\r\n    // Check if user is logged in\r\n    if (this.authService.loggedIn()) {\r\n      this.router.navigate(['/']); // Return error, route to home\r\n      return false; // Return false: user not allowed to view route\r\n    } else {\r\n      return true; // Return true: user is allowed to view route\r\n    }\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatButtonModule, MatNativeDateModule  } from '@angular/material';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\n\r\n@NgModule({\r\n\timports: [CommonModule, MatNativeDateModule, MatSlideToggleModule, MatButtonModule, MatTooltipModule, MatSnackBarModule, MatTableModule, MatStepperModule, MatIconModule, MatGridListModule, MatDialogModule, MatChipsModule, MatDatepickerModule, MatListModule, MatMenuModule, BrowserAnimationsModule, MatToolbarModule, MatCardModule, MatAutocompleteModule, MatExpansionModule, MatInputModule, MatTabsModule, MatSidenavModule],\r\n\texports: [MatButtonModule, MatSlideToggleModule, MatSnackBarModule, MatTooltipModule, MatTableModule, MatStepperModule, MatIconModule, MatGridListModule, MatDialogModule, MatChipsModule, MatDatepickerModule, MatListModule, MatMenuModule, BrowserAnimationsModule, MatToolbarModule, MatCardModule, MatAutocompleteModule, MatExpansionModule, MatInputModule, MatTabsModule, MatSidenavModule]\r\n\t})\r\n\r\nexport class MaterialModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Http, Headers, RequestOptions } from '@angular/http';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { tokenNotExpired } from 'angular2-jwt';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\r\ndomain = \"http://localhost:8080\";\r\nauthToken;\r\nuser;\r\noptions;\r\n\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  \t) { }\r\n\r\n    // Function to create headers, add token, to be used in HTTP requests\r\n  createAuthenticationHeaders() {\r\n    this.loadToken(); // Get token so it can be attached to headers\r\n    // Headers configuration options\r\n    if(this.authToken){\r\n    this.options = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json', // Format set to JSON\r\n        'authorization': this.authToken // Attach token\r\n      })\r\n    }\r\n    }\r\n  }\r\n \r\n \r\n  \t  // Function to get token from client local storage\r\n  loadToken() {\r\n  this.authToken = localStorage.getItem('token'); // Get token and asssign to variable to be used elsewhere\r\n  \t}\r\n  registerUser(user) {\r\n    return this.http.post(this.domain + '/authentication/register', user);\r\n  }\r\n  editUser(user) {\r\n    return this.http.put(this.domain + '/authentication/edit', user);\r\n  }\r\n  // Function to check if username is taken\r\n  checkUsername(username) {\r\n    return this.http.get(this.domain + '/authentication/checkUsername/' + username);\r\n  }\r\n\r\n  // Function to check if e-mail is taken\r\n  checkEmail(email) {\r\n    return this.http.get(this.domain + '/authentication/checkEmail/' + email);\r\n  }\r\n  // Function to login user\r\n  login(user) {\r\n    return this.http.post(this.domain + '/authentication/login', user);\r\n  }\r\n   // Function to logout\r\n  logout() {\r\n    this.authToken = null; // Set token to null\r\n    this.user = null; // Set user to null\r\n    localStorage.clear(); // Clear local storage\r\n  }\r\n   // Function to store user's data in client local storage\r\n  storeUserData(token, user) {\r\n    localStorage.setItem('token', token); // Set token in local storage\r\n    localStorage.setItem('user', JSON.stringify(user)); // Set user in local storage as string\r\n    this.authToken = token; // Assign token to be used elsewhere\r\n    this.user = user;       // Set user to be used elsewhere\r\n  }\r\n  \r\n\r\n  // Function to get user's profile data\r\n  getProfile() {\r\n    this.createAuthenticationHeaders(); // Create headers before sending to API\r\n    return this.http.get(this.domain + '/authentication/profile', this.options);\r\n  }\r\n  getAllUser() {\r\n    this.createAuthenticationHeaders(); // Create headers before sending to API\r\n    return this.http.get(this.domain + '/authentication/allUser', this.options);\r\n  }\r\n  \r\n    // Function to check if user is logged in\r\n  loggedIn() {\r\n    return tokenNotExpired();\r\n  }\r\n\r\n}\r\n \r\n","import { Injectable } from '@angular/core';\r\nimport { Headers, RequestOptions } from '@angular/http';\r\nimport { AuthService } from './auth.service';\r\nimport { Thought } from '../models/thought';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n@Injectable()\r\nexport class DataService {\r\n\r\n  options;\r\n  domain = this.authService.domain;\r\n\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  // Function to create headers, add token, to be used in HTTP requests\r\n  createAuthenticationHeaders() {\r\n    this.authService.loadToken(); // Get token so it can be attached to headers\r\n    // Headers configuration options\r\n    this.options = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json', // Format set to JSON\r\n        'authorization': this.authService.authToken // Attach token\r\n      })\r\n    }\r\n  }\r\n\r\n  /* ===============================================================\r\n     ADD DATA\r\n  =============================================================== */\r\n\r\n  newThought(thought) {\r\n    this.createAuthenticationHeaders(); // Create headers\r\n    return this.http.post(this.domain + '/api/newThought', thought, this.options);\r\n  }\r\n\r\n  newPerspective(perspective) {\r\n    this.createAuthenticationHeaders(); // Create headers\r\n    return this.http.post(this.domain + '/api/newPerspective', perspective, this.options);\r\n  }\r\n\r\n  /* ===============================================================\r\n     GET DATA\r\n  =============================================================== */\r\n\r\n  getAllThought() {\r\n    this.createAuthenticationHeaders(); // Create headers\r\n    return this.http.get(this.domain + '/api/allThought', this.options);\r\n  }\r\n  getAllPubThought() {\r\n    this.createAuthenticationHeaders(); // Create headers\r\n    return this.http.get(this.domain + '/api/allPubThought', this.options);\r\n  }\r\n\r\n  getSingleThought(id) {\r\n    this.createAuthenticationHeaders(); // Create headers\r\n    return this.http.get(this.domain + '/api/singleThought/' + id, this.options);\r\n  }\r\n\r\n  getChildren(id) {\r\n    this.createAuthenticationHeaders(); // Create headers\r\n    return this.http.get(this.domain + '/api/getChildren/' + id, this.options);\r\n  }\r\n\r\n  /* ===============================================================\r\n    DELETE/UPDATE DATA\r\n =============================================================== */\r\n  deleteThought(id) {\r\n    this.createAuthenticationHeaders(); // Create headers\r\n    return this.http.delete(this.domain + '/api/deleteThought/' + id, this.options);\r\n  }\r\n\r\n  // Function to edit/update Label\r\n  editThought(editthought) {\r\n    this.createAuthenticationHeaders(); // Create headers\r\n    return this.http.put(this.domain + '/api/editThought/', editthought, this.options);\r\n  }\r\n\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { User } from '../models/user';\r\nimport { DataSet, Edge, Node } from 'vis';\r\nimport { Thought } from '../models/thought';\r\nimport { Observable, of, BehaviorSubject, ReplaySubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DrawNavbarService {\r\n  activeUsers: User[] = [];\r\n  activeThoughts: Thought[] = [];\r\n  nodes = new DataSet([\r\n  ]);\r\n  edges = new DataSet([\r\n  ]);\r\n  options = {\r\n    nodes: {\r\n      shape: 'dot',\r\n      size: 20,\r\n      font: {\r\n        size: 15,\r\n        color: '#111111'\r\n      },\r\n    },\r\n    groups: {\r\n      users: { color: { background: 'red' }, size: 20 },\r\n      thoughts: { color: { background: 'blue' }, size: 10 },\r\n      myUser: { color: { background: 'green' }, size: 30 },\r\n    }\r\n  };\r\n\r\n  constructor() { }\r\n  // Store Data for Navbar Component as BehaviourSubjects\r\n  public navbarNodes = new BehaviorSubject<DataSet<Node>>(this.nodes)\r\n  navbarNodesObs = this.navbarNodes.asObservable();\r\n  public navbarEdges = new BehaviorSubject<DataSet<Edge>>(this.edges);\r\n  navbarEdgesObs = this.navbarEdges.asObservable();\r\n  public navbarOptions = new BehaviorSubject(this.options);\r\n  navbarOptionsObs = this.navbarOptions.asObservable();\r\n\r\n  clearAll() {\r\n    this.nodes.clear();\r\n    this.edges.clear();\r\n  }\r\n\r\n  drawPubThoughts(thoughts: Thought[]) {\r\n    if (thoughts) {\r\n      thoughts.forEach(thought => {\r\n        this.nodes.add({ id: thought._id, label: thought.label, group: 'thoughts' });\r\n        if (thought.contents) {\r\n          thought.contents.forEach(function (content, index) {\r\n            var linkID = thought._id + index;\r\n            this.edges.add({ id: linkID, from: thought._id, to: content._id })\r\n          })\r\n        };\r\n        this.activeThoughts.push(thought);\r\n      })\r\n    }\r\n  }\r\n\r\n  addPubThought(thought: Thought) {\r\n  }\r\n\r\n  deleteUsers() {\r\n    if (this.activeUsers.length > 0) {\r\n      this.activeUsers.forEach(user => {\r\n        this.nodes.remove(user._id)\r\n      })\r\n    }\r\n  }\r\n\r\n  drawUsers(users: User[]) {\r\n    if (users) {\r\n      users.forEach(user => {\r\n        if(user == users[0]){\r\n          this.nodes.add({ id: user._id, label: user.username, group: 'myUser' });\r\n        } else {\r\n        this.nodes.add({ id: user._id, label: user.username, group: 'users' });\r\n      }\r\n        this.activeUsers.push(user);\r\n      })\r\n      this.navbarNodes.next(this.nodes);\r\n    }\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { DataSet, Edge, Node } from 'vis';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Thought } from '../models/thought';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DrawViewerService {\r\n  activeThoughts: Thought[] = [];\r\n  nodes = new DataSet([\r\n  ]);\r\n  edges = new DataSet([\r\n  ]);\r\n  options = {\r\n    nodes: {\r\n      shape: 'dot',\r\n      size: 10,\r\n      font: {\r\n        size: 15,\r\n        color: '#111111'\r\n      },\r\n    },\r\n    physics: {\r\n      forceAtlas2Based: {\r\n        gravitationalConstant: -26,\r\n        centralGravity: 0.005,\r\n        springLength: 230,\r\n        springConstant: 0.18\r\n      },\r\n      maxVelocity: 146,\r\n      solver: 'forceAtlas2Based',\r\n      timestep: 0.35,\r\n      stabilization: { iterations: 150 }\r\n    },\r\n    groups: {\r\n      dateDim: { color: { background: 'red' }, size: 5 },\r\n      numberDim: { color: { background: 'blue' }, size: 5 },\r\n      tagDim: { color: { background: 'green' }, size: 5 },\r\n    }\r\n  };\r\n\r\n  constructor() { }\r\n  // Store Data for Navbar Component as BehaviourSubjects\r\n  public viewerNodes = new BehaviorSubject<DataSet<Node>>(this.nodes)\r\n  viewerNodesObs = this.viewerNodes.asObservable();\r\n\r\n  public viewerEdges = new BehaviorSubject<DataSet<Edge>>(this.edges);\r\n  viewerEdgesObs = this.viewerEdges.asObservable();\r\n\r\n  public viewerOptions = new BehaviorSubject(this.options);\r\n  viewerOptionsObs = this.viewerOptions.asObservable();\r\n\r\n  drawThoughtsArray(thoughts: Thought[]) {\r\n    console.log(thoughts);\r\n    if (thoughts) {\r\n      thoughts.forEach(thought => { //Draw Nodes for all Thoughts in Array\r\n        this.nodes.add({ id: thought._id, label: thought.label });\r\n        if (thought.dateDim) {\r\n          thought.dateDim.forEach(dim => {\r\n            if (!this.nodes.get(\"Timeline\")) {\r\n              this.nodes.add({ id: \"Timeline\", label: \"Time Dimensions\", group: 'dateDim' })\r\n            }\r\n            this.nodes.add({ id: dim._id, group: 'dateDim' })\r\n            this.edges.add({ from: thought._id, to: dim._id, length: 0 })\r\n            if (!this.nodes.get(dim.label)) {\r\n              this.nodes.add({ id: dim.label, label: dim.label, group: 'dateDim' })\r\n              this.edges.add({ from: dim._id, to: dim.label, length: 0, color: 'green' })\r\n              this.edges.add({ from: dim.label, to: \"Timeline\", length: 0, color: 'green' })\r\n            }\r\n          })\r\n        }\r\n        if (thought.numberDim) {\r\n          thought.numberDim.forEach(dim => {\r\n            if (!this.nodes.get(\"Numbers\")) {\r\n              this.nodes.add({ id: 'Numbers', label: 'Number Dimensions', group: 'numberDim' })\r\n            }\r\n            this.nodes.add({ id: dim._id, group: 'numberDim' })\r\n            this.edges.add({ from: thought._id, to: dim._id, length: 0 })\r\n            if (!this.nodes.get(dim.label)) {\r\n              this.nodes.add({ id: dim.label, label: dim.label, group: 'numberDim' })\r\n              this.edges.add({ from: dim._id, to: dim.label, length: 0, color: 'yellow' })\r\n              this.edges.add({ from: dim.label, to: 'Numbers', length: 0, color: 'yellow' })\r\n            }\r\n          })\r\n        }\r\n        if (thought.tagDim) {\r\n          thought.tagDim.forEach(dim => {\r\n            if (!this.nodes.get(\"Tags\")) {\r\n              this.nodes.add({ id: 'Tags', label: 'Tag Dimensions', group: 'tagDim' })\r\n            }\r\n            this.nodes.add({ id: dim._id, group: 'tagDim' })\r\n            this.edges.add({ from: thought._id, to: dim._id, length: 0 })\r\n            if (!this.nodes.get(dim.label)) {\r\n              this.nodes.add({ id: dim.label, label: dim.label, group: 'tagDim' })\r\n              this.edges.add({ from: dim._id, to: dim.label, length: 0, color: 'red' })\r\n              this.edges.add({ from: dim.label, to: 'Tags', length: 0, color: 'red' })\r\n            }\r\n          })\r\n        }\r\n      });\r\n\r\n      thoughts.forEach(thought => { //Draw Edges for all Thoughts with Contents\r\n        var checkThought: Thought = thought;\r\n        if (checkThought.contents) {\r\n          checkThought.contents.forEach(content => {\r\n            this.edges.add({ from: checkThought._id, to: content })\r\n          })\r\n        }\r\n        this.activeThoughts.push(thought);\r\n      })\r\n    }\r\n  }\r\n  clearAll() {\r\n    this.nodes.clear();\r\n    this.edges.clear();\r\n  }\r\n\r\n  changeThoughts(thoughts: Thought[]) {\r\n    //for Each Thought: Write Nodes/Edges/Levels...\r\n    //User if Data loaded for first Time and if Change in \"Room\"/ThoughtArray\r\n  }\r\n\r\n  drawDimension(thoughts: Thought[]) {\r\n    //Write each Thought of that Dimension: Write Nodes/Edges/Levels...\r\n  }\r\n\r\n  removeDimension(thoughts: Thought[]) {\r\n    //Write each Thought of that Dimension: Write Nodes/Edges/Levels...\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Thought } from '../models/thought';\r\nimport { Observable, of, BehaviorSubject, ReplaySubject } from 'rxjs';\r\nimport { DataService } from './data.service';\r\nimport { User } from '../models/user';\r\nimport { AuthService } from './auth.service';\r\nimport { DrawNavbarService } from './draw-navbar.service';\r\nimport { DrawViewerService } from './draw-viewer.service';\r\nimport { timeout } from 'rxjs/operators';\r\nimport { Perspective } from '../models/perspective';\r\nimport { Dimensions } from '../models/Dimensions/dimensions';\r\nimport { LevelDimension } from '../models/Dimensions/levelDimension';\r\nimport { DateDimension } from '../models/Dimensions/dateDimension';\r\nimport { TagDimension } from '../models/Dimensions/tagDimension';\r\nimport { NumberDimension } from '../models/Dimensions/numberDimension';\r\n\r\n@Injectable()\r\nexport class InternalService {\r\n\r\n  //Default Objects (for LoggedOut Views)\r\n  welcomeThought: Thought = {\r\n    _id: \"WelcomeThought\",\r\n    label: \"Welcome!\"\r\n  };\r\n  guestUser: User = {\r\n    _id: \"guestID\",\r\n    username: \"Guest\"\r\n  };\r\n\r\n  UserThought: Thought = {  //Create a UserSelected Thought:\r\n    _id: \"fakeID\",\r\n    label: \"My Thoughts\",\r\n    contents: []\r\n  }\r\n\r\n  allThoughts: Thought[];\r\n  newDimensionsArray: Dimensions;\r\n  //Save all relevant Data as BehaviourSubjects\r\n\r\n  //SEARCH LISTS\r\n  // Stores all Private Thoughts\r\n  public privateThoughts = new BehaviorSubject<Thought[]>([]);\r\n  privateThoughtsObs = this.privateThoughts.asObservable();\r\n\r\n  // Stores all Private Thoughts\r\n  public publicThoughts = new BehaviorSubject<Thought[]>([]);\r\n  publicThoughtsObs = this.publicThoughts.asObservable();\r\n\r\n  // Stores all all Users \r\n  public allUsers = new BehaviorSubject<User[]>([]);\r\n  allUsersObs = this.allUsers.asObservable();\r\n\r\n\r\n  //SELECTED DATA\r\n  //stores User (default: Guest)\r\n  public selectedUser = new BehaviorSubject<User>(this.guestUser);\r\n  selectedUserObs = this.selectedUser.asObservable();\r\n\r\n  //Selected Thought \r\n  public selectedThought = new BehaviorSubject<Thought>(this.welcomeThought);\r\n  selectedThoughtObs = this.selectedThought.asObservable();\r\n\r\n  //Selected Context (Context of SelectedThoughtArray) \r\n  public selectedContext = new BehaviorSubject<Thought>(this.welcomeThought);\r\n  selectedContextObs = this.selectedThought.asObservable();\r\n\r\n  //Selected ThoughtsArray (Thought incl. Content which is being shown)\r\n  public selectedThoughtArray = new BehaviorSubject<Thought[]>([]);\r\n  selectedThoughtArrayObs = this.selectedThoughtArray.asObservable();\r\n\r\n  //SELECTED TOOL\r\n  public selectedPerspectives = new BehaviorSubject<Perspective[]>([]);\r\n  selectedPerspectivesObs = this.selectedPerspectives.asObservable();\r\n\r\n  public selectedPerspective = new BehaviorSubject<Perspective>(null);\r\n  selectedPerspectiveObs = this.selectedPerspective.asObservable();\r\n\r\n  //SELECTED TOOL\r\n  public allDimensions = new BehaviorSubject<Dimensions>(null);\r\n  allDimensionsObs = this.allDimensions.asObservable();\r\n  //SELECTED TOOL\r\n  public selectedDimensions = new BehaviorSubject<Dimensions>(null);\r\n  selectedDimensionsObs = this.selectedDimensions.asObservable();\r\n\r\n  //SELECTED TOOL\r\n  public selectedTool = new BehaviorSubject<String>(\"none\");\r\n  selectedToolObs = this.selectedTool.asObservable();\r\n\r\n  constructor(private dataService: DataService, private authService: AuthService, private drawViewerService: DrawViewerService, private drawNavbarService: DrawNavbarService) {\r\n  }\r\n\r\n  //LOAD DATA --> FirstLoad (Navbar) or Login/Register\r\n  loadData() {\r\n    //IF LOGGEDIN\r\n    if (this.authService.loggedIn()) {\r\n\r\n      //NAVBAR\r\n      //1. UserArray\r\n      this.authService.getProfile().subscribe(data => { //Get Selected User\r\n        this.selectedUser.next(data['user']);\r\n      });\r\n      this.drawNavbarService.deleteUsers();\r\n      this.authService.getAllUser().subscribe(data => { //Get all User\r\n        console.log(data);\r\n        var userArray: User[] = [];\r\n\r\n        data['users'].forEach(user => {\r\n          if (user._id != this.selectedUser.getValue()._id) {\r\n            userArray.push(user)\r\n          }\r\n        })\r\n\r\n        this.allUsers.next(userArray); //Save User without myself For Searches\r\n        userArray.unshift(this.selectedUser.getValue());  //Add Me at first Place\r\n        this.drawNavbarService.drawUsers(userArray);\r\n      });\r\n      //2. PubThoughtsArray\r\n      this.dataService.getAllPubThought().subscribe(data => { //Get all public Thoughts\r\n        this.publicThoughts.next(data['allThoughts']); //Save PubThoughts for later Search\r\n        this.drawNavbarService.drawPubThoughts(data['allThoughts']); // Draw PubThoughts\r\n      })\r\n      //VIEWER\r\n      this.loadMyThoughts();\r\n    } else {\r\n      this.loggedOut()\r\n    }\r\n  }\r\n  loggedOut() {\r\n    this.clearAll();\r\n    var UserArray: User[] = [];\r\n    UserArray.push(this.guestUser);\r\n    var thoughtArray: Thought[] = [];\r\n    thoughtArray.push(this.welcomeThought);\r\n    this.drawNavbarService.drawUsers(UserArray);\r\n    this.drawNavbarService.drawPubThoughts(thoughtArray);\r\n    this.drawViewerService.drawThoughtsArray(thoughtArray);\r\n    this.selectedUser.next(this.guestUser);\r\n  }\r\n\r\n  loadMyThoughts() {\r\n    if(this.selectedUser.getValue().starterPerspectives){\r\n      this.selectedPerspectives.next(this.selectedUser.getValue().starterPerspectives); // load starter Perspectives available\r\n      this.selectedPerspective.next(this.selectedUser.getValue().starterPerspectives[0]); // select first one Selected\r\n    } else {\r\n      this.selectedPerspectives.next(null); // no Perspectives available\r\n      this.selectedPerspective.next(null); // no Perspective Selected\r\n    }\r\n    this.dataService.getAllThought().subscribe(data => { //Get all private Thoughts\r\n      this.selectedContext.next(this.UserThought); //Take \"My Thought\" as Selected Thought\r\n      this.selectedThought.next(this.UserThought); //Take \"My Thought\" as Selected Context\r\n      this.privateThoughts.next(data['allThoughts']); //Save Private Thoughts for Search\r\n      this.selectedThoughtArray.next(data['allThoughts']);\r\n      this.getDimensions(data['allThoughts']); // Get Dimensions of selected Thought Array\r\n    \r\n  \r\n        this.drawViewerService.clearAll(); // Clear Viewer\r\n        this.drawViewerService.drawThoughtsArray(data['allThoughts']); // Draw ThoughtsArray\r\n      \r\n    })\r\n  }\r\n\r\n  getDimensions(thoughts: Thought[]) {\r\n    this.newDimensionsArray = {\r\n      levelDimensions: [],\r\n      dateDimensions: [],\r\n      numberDimensions: [],\r\n      tagDimensions: []\r\n    };\r\n    thoughts.forEach(thought => {\r\n      if (thought.contents.length > 0) {\r\n        this.newDimensionsArray.levelDimensions.push({ label: thought.label, objId: thought._id, level: thought.contexts.length })\r\n      }\r\n      if (thought.dateDim.length > 0) {\r\n        thought.dateDim.forEach(dim => {\r\n          if (!this.newDimensionsArray.dateDimensions.find(d => dim.label == d.label))\r\n            this.newDimensionsArray.dateDimensions.push({ label: dim.label })\r\n        })\r\n      }\r\n      if (thought.tagDim.length > 0) {\r\n        thought.tagDim.forEach(dim => {\r\n          if (!this.newDimensionsArray.tagDimensions.find(d => dim.label == d.label))\r\n            this.newDimensionsArray.tagDimensions.push({ label: dim.label })\r\n        })\r\n      }\r\n      if (thought.numberDim.length > 0) {\r\n        thought.numberDim.forEach(dim => {\r\n          if (!this.newDimensionsArray.numberDimensions.find(d => dim.label == d.label))\r\n            this.newDimensionsArray.numberDimensions.push({ label: dim.label })\r\n        })\r\n      }\r\n      this.allDimensions.next(this.newDimensionsArray);\r\n      console.log(this.newDimensionsArray);\r\n    })\r\n\r\n  }\r\n\r\n  changePerspective(perspective: Perspective) {\r\n    if (perspective.label == \"specialCode!\") {\r\n      this.selectedPerspective.next(null);\r\n      this.drawViewerService.clearAll();\r\n      this.drawViewerService.drawThoughtsArray(this.selectedThoughtArray.getValue());\r\n    } else {\r\n      this.selectedPerspective.next(perspective);\r\n      this.perspectiveFilter(this.selectedThoughtArray.getValue());\r\n    }\r\n    console.log(this.selectedThoughtArray.getValue());\r\n\r\n  }\r\n\r\n  perspectiveFilter(thoughts: Thought[]) {\r\n    this.drawViewerService.clearAll(); // Clear Viewer\r\n\r\n    var relevantLevels: LevelDimension[] = this.selectedPerspective.getValue().dimensions.levelDimensions;\r\n    var relevantDates: DateDimension[] = this.selectedPerspective.getValue().dimensions.dateDimensions;\r\n    var relevantTags: TagDimension[] = this.selectedPerspective.getValue().dimensions.tagDimensions;\r\n    var relevantNumbers: NumberDimension[] = this.selectedPerspective.getValue().dimensions.numberDimensions;\r\n    var newThoughtArray: Thought[] = [];\r\n    thoughts.forEach(thought => {\r\n      var pushIt = false;\r\n      //For each Thought, check if it has any of the relevant Dimensions\r\n      //First check Level, else check other Dimensions\r\n      if (relevantLevels) {\r\n        relevantLevels.forEach(levelDim => {\r\n          if (levelDim.objId == thought.contexts[0]) pushIt = true;\r\n        });\r\n      }\r\n\r\n\r\n      // switch\r\n      // case 1: jsjd\r\n\r\n      // breakö\r\n      // case 1\r\n\r\n\r\n      if (relevantDates) {\r\n      relevantDates.forEach(dateDim => {\r\n        thought.dateDim.forEach(date => {\r\n          if (date.label == dateDim.label) pushIt = true;\r\n        });\r\n      });\r\n    }\r\n    if (relevantTags) {\r\n      relevantTags.forEach(tagDim => {\r\n        thought.dateDim.forEach(tag => {\r\n          if (tag.label == tagDim.label) pushIt = true;\r\n        });\r\n      });\r\n    }\r\n    if (relevantNumbers) {\r\n      relevantNumbers.forEach(numberDim => {\r\n        thought.dateDim.forEach(numb => {\r\n          if (numb.label == numberDim.label) pushIt = true;\r\n        });\r\n      });\r\n    }\r\n      if (pushIt) { newThoughtArray.push(thought) };\r\n    })\r\n    this.drawViewerService.drawThoughtsArray(newThoughtArray); // Draw ThoughtsArray\r\n  }\r\n\r\n  clearAll() {\r\n    this.drawNavbarService.clearAll();\r\n    this.drawViewerService.clearAll();\r\n  }\r\n\r\n  //Load Data: After Login, load private Thoughts, load Users, load Selected User, load public Thoughts\r\n  //Put private and public thoughts into AllThoughts\r\n\r\n  defaultSelectedThought() {\r\n    this.selectedThought.next(this.UserThought);\r\n  }\r\n\r\n  changeSelectedThought(id) {\r\n    this.dataService.getSingleThought(id).subscribe(data => {\r\n      this.selectedThought.next(data['thought']);\r\n    })\r\n  }\r\n\r\n  changeViewerThoughts(id) {\r\n    //get selected Thought\r\n    //For as Long as there are Contents, add Contents to viewerThoughts\r\n    // For Each Content of Selected Thought, add Thought.\r\n    //Eventuell: 3 level rauf und 3 level runter.\r\n    // For Each Content of added Thought, add Content...\r\n\r\n    //First part: Get new ViewerThoughtsArray\r\n    //Second: Change Viewer ThoughtsArray\r\n  }\r\n\r\n\r\n  changeThought(id) {\r\n\r\n  }\r\n\r\n  changeTool(tool: String) {\r\n    this.selectedTool.next(tool);\r\n  }\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport 'hammerjs';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}